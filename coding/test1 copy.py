# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtSql import *
from PyQt5 import QtCore, QtGui, QtWidgets
import socket  #导入socket模块
import time #导入time模块
from PyQt5.Qt import *
import pyqtgraph as pg
import serial.tools.list_ports
import sys
import re


class Worker(QThread):
    begin = pyqtSignal()
    #begin1= pyqtSignal()
    def run(self):
        while True:
            self.sleep(0.5)
            self.begin.emit()
            # self.begin1.emitf()

class MenuAction(QAction):
    def __init__(self, *__args):
        super().__init__(*__args)
        self.triggered.connect(lambda: self.click_event())
        self.is_clicked = 0

    def click_event(self):
        self.is_clicked = 1

    def click_event_clear(self):
        self.is_clicked = 0

class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
          super().__init__()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMinimumSize(QtCore.QSize(1038, 0))
        self.centralwidget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget.setMouseTracking(False)
        self.centralwidget.setTabletTracking(False)
        self.centralwidget.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.centralwidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.centralwidget.setObjectName("centralwidget")
        
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setLocale(QtCore.QLocale(QtCore.QLocale.Chinese, QtCore.QLocale.China))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setObjectName("tabWidget")
        
        self.main = QtWidgets.QWidget()
        self.plot = QtWidgets.QWidget()
        self.figure = QtWidgets.QWidget()
        
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)#设置为垂直布局
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget.addTab(self.main, "")
        self.tabWidget.addTab(self.plot, "")
        self.tabWidget.addTab(self.figure, "")
        
       
        
        self.figure.setObjectName("figure")
        self.plot.setObjectName("plot")
        self.main.setObjectName("main")
        
        self.gridLayout = QtWidgets.QGridLayout(self.main)
        self.horizontalLayout = QtWidgets.QVBoxLayout(self.figure)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.plot)
        
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        #self.bianliang()
        self.initmain()
        self.initplot()
        self.initfiguer()
        self.initudp()
        # self.pushButton_3 = QtWidgets.QPushButton(self.figure)
        # self.pushButton_3.setObjectName("绘图botton")
        # self.horizontalLayout.addWidget(self.pushButton_3)
 
        # self.pushButton = QtWidgets.QPushButton(self.plot)
        # self.pushButton.setObjectName("pushButton")
        # self.horizontalLayout_2.addWidget(self.pushButton)
       
    def initmain(self):
        '''----------------------发送函数-----------------------'''
        self.pushButton_8 = QtWidgets.QPushButton(self.main)
        self.pushButton_8.setObjectName("手动发送")
        self.pushButton_8.clicked.connect(self.onClick_ButtonToText)
        self.gridLayout.addWidget(self.pushButton_8, 11, 1, 1, 1)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.main)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.gridLayout.addWidget(self.plainTextEdit, 11, 2, 3, 1)
        
        self.label = QtWidgets.QLabel(self.main)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 1)
        
        self.label1 = QtWidgets.QLabel(self.main)
        self.label1.setObjectName("label")
        self.gridLayout.addWidget(self.label1, 2, 0, 1, 1)
        
        self.label_7 = QtWidgets.QLabel(self.main)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 5, 0, 1, 1) 
        
        self.line = QtWidgets.QFrame(self.main)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.line, 8, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.main)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 3, 0, 1, 1)
        self.line_2 = QtWidgets.QFrame(self.main)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout.addWidget(self.line_2, 8, 1, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(self.main)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout.addWidget(self.pushButton_7, 11, 0, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.main)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 6, 0, 1, 1)
       
        # self.checkBox = QtWidgets.QCheckBox(self.main)
        # self.checkBox.setObjectName("checkBox")
        # self.checkBox.stateChanged.connect(lambda:self.checkboxState(self.checkBox))
        # self.gridLayout.addWidget(self.checkBox, 12, 0, 1, 1)#十进制
        # self.checkBox_2 = QtWidgets.QCheckBox(self.main)
        # self.checkBox_2.setObjectName("checkBox_2")
        # self.checkBox_2.stateChanged.connect(lambda:self.checkboxState(self.checkBox_2))
        # self.gridLayout.addWidget(self.checkBox_2, 12, 1, 1, 1)#十六进制
        self.button1 = QtWidgets.QRadioButton('十进制')
        self.button1.setChecked(True)

        self.button1.toggled.connect(self.buttonState)
        self.gridLayout.addWidget(self.button1,12, 0, 1, 1)

        self.button2 = QtWidgets.QRadioButton('十六进制')
        self.button2.toggled.connect(self.buttonState)
        self.gridLayout.addWidget(self.button2,12, 1, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.main)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda:self.whichButton(self.pushButton_2))
        self.gridLayout.addWidget(self.pushButton_2,7, 1, 1, 1)
        '''----------------------端口改ip-----------------------'''
        self.ipLineEdit = QtWidgets.QLineEdit(self.main)
        self.ipLineEdit.setObjectName("comboBox")
        self.ipLineEdit.setInputMask('000.000.000.000;_')
        #self.gridLayout.addRow('数字掩码',ipLineEdit)
        self.ipLineEdit.textChanged.connect(self.textChanged)
        self.gridLayout.addWidget(self.ipLineEdit, 1, 1, 1, 1)
        '''----------------------改掩码-----------------------'''
        self.ipLineEdit2 = QtWidgets.QLineEdit(self.main)
        self.ipLineEdit2.setObjectName("comboBox2")
        self.ipLineEdit2.setInputMask('000.000.000.000;_')
        self.ipLineEdit2.textChanged.connect(self.textChanged1)
        #self.gridLayout.addRow('数字掩码',ipLineEdit)
        self.gridLayout.addWidget(self.ipLineEdit2, 3, 1, 1, 1)
        
        self.ipLineEdit3 = QtWidgets.QLineEdit(self.main)
        self.ipLineEdit3.setObjectName("comboBox3")
        self.ipLineEdit3.setInputMask('0000;_')
        self.ipLineEdit3.textChanged.connect(self.textChanged2)
        #self.gridLayout.addRow('数字掩码',ipLineEdit)
        self.gridLayout.addWidget(self.ipLineEdit3, 2, 1, 1, 1)
        '''----------------------改掩码-----------------------'''
        self.comboBox_3 = QtWidgets.QComboBox(self.main)
        self.comboBox_3.setObjectName("comboBox_3")
        for i in range(0,10):
            self.comboBox_3.addItem(str(i))
        self.comboBox_3.currentIndexChanged.connect(self.selectionChange1)
        self.gridLayout.addWidget(self.comboBox_3, 4, 1, 1, 1)
        self.comboBox_7 = QtWidgets.QComboBox(self.main)
        self.comboBox_7.setObjectName("comboBox_7")
        for i in range(0,10):
            self.comboBox_7.addItem(str(i))
        self.comboBox_7.currentIndexChanged.connect(self.selectionChange2)
        self.gridLayout.addWidget(self.comboBox_7, 5, 1, 1, 1)
        self.comboBox_8 = QtWidgets.QComboBox(self.main)
        self.comboBox_8.setObjectName("comboBox_8")
        for i in range(0,10):
            self.comboBox_8.addItem(str(i))
        self.comboBox_8.currentIndexChanged.connect(self.selectionChange3)
        self.gridLayout.addWidget(self.comboBox_8, 6, 1, 1, 1)
        
        
        self.textEdit = QtWidgets.QTextEdit(self.main)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setReadOnly(True)
        self.gridLayout.addWidget(self.textEdit, 1, 2, 9, 1)

        self.label_3 = QtWidgets.QLabel(self.main)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 4, 0, 1, 1)
         
        self.verticalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 1038, 26))
        # self.menubar.setObjectName("menubar")
        # self.menumain = QtWidgets.QMenu(self.menubar)
        # self.menumain.setObjectName("menumain")
        # MainWindow.setMenuBar(self.menubar)
        # self.menubar.addAction(self.menumain.menuAction())

        self.retranslateUi(MainWindow)
        # self.tabWidget.setCurrentIndex(0)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def initplot(self):
        self.graph_win = pg.GraphicsLayoutWidget(self.plot)  # 创建图像窗口控件graph_win
        self.graph0 = self.graph_win.addPlot()  # 创建图像graph0
        self.curve0 = self.graph0.plot(pen="r")  # 创建曲线curve0
        self.curve1 = self.graph0.plot(pen="g")
        self.curve2 = self.graph0.plot(pen="b")
        self.curve3 = self.graph0.plot(pen="w")
        self.curve4 = self.graph0.plot(pen="r")  # 创建曲线curve0
        self.curve5 = self.graph0.plot(pen="g")
        self.curve6 = self.graph0.plot(pen="b")
        self.curve7 = self.graph0.plot(pen="w")
        layout_func = QtWidgets.QVBoxLayout(self.plot)  # 创建1级水平布局管理器layout_func
        layout_func.setContentsMargins(0, 0, 10, 0)
        self.horizontalLayout_2.addWidget(self.graph_win)  # 将图像窗口控件graph_win添加到0级布局管理器layout_win
        self.horizontalLayout_2.addLayout(layout_func)  # 将1级布局管理器layout_func添加到0级布局管理器layout_win
    # def checkboxState(self,NULL):
    #     check1Status = self.checkBox.text() + ', isChecked=' + str(self.checkBox.isChecked()) + ',checkState=' + str(self.checkBox.checkState()) + '\n'
    #     check2Status = self.checkBox_2.text() + ', isChecked=' + str(self.checkBox_2.isChecked()) + ',checkState=' + str(self.checkBox_2.checkState()) + '\n'
    #     print(check1Status + check2Status )
    def initfiguer(self):
        self.queryModel = None
        # 数据表
        self.tableView = None
        # 总数页文本
        self.totalPageLabel = None
        # 当前页文本
        self.currentPageLabel = None
        self.totalRecordLabel = None
        # 转到页输入框
        self.switchPageLineEdit = None
        # 前一页按钮
        self.prevButton = None
        # 后一页按钮
        self.nextButton = None
        # 转到页按钮
        self.switchPageButton = None
        # 当前页
        self.currentPage = 0
        # 总页数
        self.totalPage = 0
        # 总记录数
        self.totalRecrodCount = 0
        # 每页显示记录数
        self.PageRecordCount = 20

        self.db = None
        self.createWindow()
        self.setTableView()
        self.prevButton.clicked.connect(self.onPrevButtonClick)
        self.nextButton.clicked.connect(self.onNextButtonClick)
        self.switchPageButton.clicked.connect(self.onSwitchPageButtonClick)
    def initudp(self):
        self.ip = '000.000.000.000'
        self.addr = '000.000.000.000'
        self.PORT = 0
        self.receive_data='0'
        self._thread=Worker(self)
        self._thread.begin.connect(self.updateudp)
        # self._thread.begin1.connect(self.updatewindows)
        # self._thread.valueChanged.connect(self.progressBar.setValue)
    def updateudp(self):
        self.server_socket.setblocking(0)
        try:
            now = time.time()  #获取当前时间
                            # 接收客户端传来的数据 recvfrom接收客户端的数据，默认是阻塞的，直到有客户端传来数据
                            # recvfrom 参数的意义，表示最大能接收多少数据，单位是字节
                            # recvfrom返回值说明
                            # receive_data表示接受到的传来的数据,是bytes类型
                            # client  表示传来数据的客户端的身份信息，客户端的ip和端口，元组

            self.receive_data, client =  self.server_socket.recvfrom(1024)

            # print(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(now))) #以指定格式显示时间
            # print("来自客户端%s,发送的%s\n" % (client, self.receive_data))  #打印接收的内容

            self.textEdit.append(self.receive_data.decode())
        except:
            pass
    # def updatewindows(self):
        
    def updateplot(self):
        pass
    def updatefigure(self):
        pass 
    
       
    def createWindow(self):
        # 操作布局
        
        operatorLayout = QHBoxLayout()
        self.prevButton = QPushButton("前一页")
        self.nextButton = QPushButton("后一页")
        self.switchPageButton = QPushButton("Go")
        self.switchPageLineEdit = QLineEdit()
        self.switchPageLineEdit.setFixedWidth(40)
        switchPage = QLabel("转到第")
        page = QLabel("页")
        operatorLayout.addWidget(self.prevButton)
        operatorLayout.addWidget(self.nextButton)
        operatorLayout.addWidget(switchPage)
        operatorLayout.addWidget(self.switchPageLineEdit)
        operatorLayout.addWidget(page)
        operatorLayout.addWidget(self.switchPageButton)
        operatorLayout.addWidget(QSplitter())
        # 状态布局
        statusLayout = QHBoxLayout()
        self.totalPageLabel = QLabel()
        self.totalPageLabel.setFixedWidth(70)
        self.currentPageLabel = QLabel()
        self.currentPageLabel.setFixedWidth(70)
        self.totalRecordLabel = QLabel()
        self.totalRecordLabel.setFixedWidth(70)
        statusLayout.addWidget(self.totalPageLabel)
        statusLayout.addWidget(self.currentPageLabel)
        statusLayout.addWidget(QSplitter())
        statusLayout.addWidget(self.totalRecordLabel)
        # 设置表格属性
        self.tableView = QTableView()
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # 创建界面
       
        self.horizontalLayout.addLayout(operatorLayout,0)
        self.horizontalLayout.addWidget(self.tableView,10)#表格
        self.horizontalLayout.addLayout(statusLayout,2)
       
    def setTableView(self):
        print('*** step2 SetTableView')

        self.db = QSqlDatabase.addDatabase('QSQLITE')
        self.db.setDatabaseName('bishe.db')
        self.db.open()
        self.queryModel = QSqlQueryModel()
        self.currentPage = 1
        self.totalRecrodCount = self.getTotalRecordCount()
        self.totalPage = self.getPageCount()
        self.updateStatus()
        self.setTotalPageLabel()
        self.setTotalRecordLabel()
        self.recordQuery(0)
        self.tableView.setModel(self.queryModel)
        print('totalRecordCount=' + str(self.totalRecrodCount))
        print('totalPage=' + str(self.totalPage))
        self.queryModel.setHeaderData(0, Qt.Horizontal, 'ID')
        self.queryModel.setHeaderData(1, Qt.Horizontal, 'CHANNEL 1')
        self.queryModel.setHeaderData(2, Qt.Horizontal, 'CHANNEL 2')
        self.queryModel.setHeaderData(3, Qt.Horizontal, 'CHANNEL 3')
        self.queryModel.setHeaderData(4, Qt.Horizontal, 'CHANNEL 4')
        self.queryModel.setHeaderData(4, Qt.Horizontal, 'TIME ms')


    def getTotalRecordCount(self):
        self.queryModel.setQuery("select * from COMPANY")
        print( self.queryModel.setQuery("select * from COMPANY"))
        rowCount = self.queryModel.rowCount()
        # i=0
        # for x in self.db.find():
        #     i=i+1
        # rowCount=self.db.estimated_document_count()
        print('rowCount=' + str(rowCount))
        return rowCount
    def getPageCount(self):
        if self.totalRecrodCount % self.PageRecordCount == 0:
            return self.totalRecrodCount / self.PageRecordCount
        else:
            return self.totalRecrodCount / self.PageRecordCount + 1
    def updateStatus(self):
        szCurrentText = ("当前第%d页" % self.currentPage)
        self.currentPageLabel.setText(szCurrentText)
        if self.currentPage == 1:
            self.prevButton.setEnabled(False)
            self.nextButton.setEnabled(True)
        elif self.currentPage == self.totalPage:
            self.prevButton.setEnabled(True)
            self.nextButton.setEnabled(False)
        else:
            self.prevButton.setEnabled(True)
            self.nextButton.setEnabled(True)
    def setTotalPageLabel(self):
        szPageCountText = ("总共%d页" % self.totalPage)
        self.totalPageLabel.setText(szPageCountText)
    def setTotalRecordLabel(self):
        szTotalRecordText = ("共%d条" % self.totalRecrodCount)
        print('*** setTotalRecordLabel szTotalRecordText=' + szTotalRecordText)
        self.totalRecordLabel.setText(szTotalRecordText)
    def recordQuery(self, limitIndex):
        szQuery = ("select * from COMPANY limit %d,%d" % (limitIndex, self.PageRecordCount))
        print(szQuery)
        print('query sql=' + szQuery)
        self.queryModel.setQuery(szQuery)
    def onPrevButtonClick(self):
        print('*** onPrevButtonClick ');
        limitIndex = (self.currentPage - 2) * self.PageRecordCount
        self.recordQuery(limitIndex)
        self.currentPage -= 1
        self.updateStatus()
    def onNextButtonClick(self):
        print('*** onNextButtonClick ');
        limitIndex = self.currentPage * self.PageRecordCount
        self.recordQuery(limitIndex)
        self.currentPage += 1
        self.updateStatus()
    def onSwitchPageButtonClick(self):
        # 得到输入字符串
        szText = self.switchPageLineEdit.text()
        # 数字正则表达式
        pattern = re.compile(r'^[0-9]*[1-9][0-9]*$')
        match = pattern.match(szText)
        
        # 判断是否为数字
        if not match:
            QMessageBox.information(self, "提示", "请输入数字")
            return

        # 是否为空
        if szText == '':
            QMessageBox.information(self, "提示", "请输入跳转页面")
            return

        # 得到页数
        pageIndex = int(szText)
        # 判断是否有指定页
        if pageIndex > self.totalPage or pageIndex < 1:
            QMessageBox.information(self, "提示", "没有指定的页面，请重新输入")
            return

        # 得到查询起始行号
        limitIndex = (pageIndex - 1) * self.PageRecordCount

        # 记录查询
        self.recordQuery(limitIndex);
        # 设置当前页
        self.currentPage = pageIndex
        # 刷新状态
        self.updateStatus();
    def whichButton(self,btn):
        
        print(btn)
        print('被单击的按钮是<' + btn.text() + '>')
        print(self.ip,'\n',self.addr,'\n',self.PORT,'\n')
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        address = (self.ip, (int)(self.PORT))  
        # print(type(address))
        try:
            self.server_socket.bind(address)  # 为服务器绑定一个固定的地址，ip和端口
        except:
            QMessageBox.information(self, "提示", "为服务器绑定一个固定的地址，ip和端口")
        self.server_socket.settimeout(10)  #设置一个时间提示，如果10秒钟没接到数据进行提示
        if not self._thread.isRunning():
            print('main id', QThread.currentThread())
            self._thread.start()  # 启动线程

    def buttonState(self):
        radioButton = self.button1.sender()

        if radioButton.isChecked() == True:
            print('<' + radioButton.text() + '> 被选中')
        else:
            print('<' + radioButton.text() + '> 被取消选中状态')
    def selectionChange1(self,i):
        self.label.setText(self.comboBox_3.currentText())
        self.label.adjustSize()
        for count in range(self.comboBox_3.count()):
            print('item' + str(count) + '=' + self.comboBox_3.itemText(count))
        print('current index',i,'selection changed', self.comboBox_3.currentText())
        
    def selectionChange2(self,i): 
        self.label.setText(self.comboBox_7.currentText())
        self.label.adjustSize()
        for count in range(self.comboBox_7.count()):
            print('item' + str(count) + '=' + self.comboBox_7.itemText(count))

        print('current index',i,'selection changed', self.comboBox_7.currentText())
    def selectionChange3(self,i):
        self.label.setText(self.comboBox_8.currentText())
        self.label.adjustSize()
        for count in range(self.comboBox_8.count()):
            print('item' + str(count) + '=' + self.comboBox_8.itemText(count))

        print('current index',i,'selection changed', self.comboBox_8.currentText())
    def textChanged(self,text):
            self.ip = text
    def textChanged1(self,text):
            self.addr = text
    def textChanged2(self,text):
            self.PORT=text
    def onClick_ButtonToText(self):
            print(self.plainTextEdit.toPlainText())
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "2018级自动化1班刘宇辰毕业设计"))
        self.pushButton_8.setText(_translate("MainWindow", "手动发送"))
        self.label.setText(_translate("MainWindow", "I  P  "))
        self.label_7.setText(_translate("MainWindow", "数 据 位"))
        self.label1.setText(_translate("MainWindow", "端 口 号"))
        self.label_2.setText(_translate("MainWindow", "子网掩码"))
        self.pushButton_7.setText(_translate("MainWindow", "清空接受区"))
        self.label_8.setText(_translate("MainWindow", "停 止 位"))
        # self.checkBox.setText(_translate("MainWindow", "十进制"))
        # self.checkBox_2.setText(_translate("MainWindow", "十六进制"))
        self.pushButton_2.setText(_translate("MainWindow", "打开通讯"))
        # self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
# "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
# "p, li { white-space: pre-wrap; }\n"
# "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
# "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_3.setText(_translate("MainWindow", "校 验 位"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.main), _translate("MainWindow", "主要信息"))
        # self.pushButton.setText(_translate("MainWindow", "2222"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.plot), _translate("MainWindow", "绘图"))
        # self.pushButton_3.setText(_translate("MainWindow", "PushButton"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.figure), _translate("MainWindow", "数据库"))
        #self.menumain.setTitle(_translate("MainWindow", "主窗口"))
if __name__ == '__main__':
    import sys
    from PyQt5.QtWidgets import QApplication, QMainWindow
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
