# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import *
from PyQt5.QtSql import *
from PyQt5 import QtCore, QtGui, QtWidgets
import socket  #导入socket模块
import time #导入time模块
from PyQt5.Qt import *
import pyqtgraph as pg
import serial.tools.list_ports
import sys
import sqlite3
import re
import datetime
data1=0.0
data2=0.0
data3=0.0
data4=0.0
id = 0
client='0'
server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
plotallflag = False
socketflag = False
from PyQt5.Qt import *

pg.setConfigOption('background', '#C8C8C8')
pg.setConfigOption('foreground', 'd')
class UDPConnect(QThread):
    begin = pyqtSignal()
    begin1= pyqtSignal()
    begin2 = pyqtSignal()
    def __init__(self,ui):
        super(UDPConnect, self).__init__()
        self.myui=ui


    def run(self):
        while True:
            global data1
            global data2
            global data3
            global data4
            global client
            # self.server_socket.setblocking(0)
            try:
                now = time.time()  # 获取当前时间
               # print(now)
                # 接收客户端传来的数据 recvfrom接收客户端的数据，默认是阻塞的，直到有客户端传来数据
                # recvfrom 参数的意义，表示最大能接收多少数据，单位是字节
                # recvfrom返回值说明
                # receive_data表示接受到的传来的数据,是bytes类型
                # client  表示传来数据的客户端的身份信息，客户端的ip和端口，元组
                receive_data, client = server_socket.recvfrom(1024)
                # print(receive_data.decode())
                receive_data=receive_data.decode()
                # print(receive_data)
                # data1.append(float(receive_data[0:15]))
                # data2.append(float(receive_data[16:31]))
                # data3.append(float(receive_data[32:47]))
                # data4.append(float(receive_data[48:63]))
                data1=(float(receive_data[0:15]))
                data2=(float(receive_data[16:31]))
                data3=(float(receive_data[32:47]))
                data4=(float(receive_data[48:63]))

                self.begin.emit()
                self.begin1.emit()
                self.begin2.emit()
                # print((data1))
                #print(len(data1))
                # if(len(data1)>100):
                #     #print(len(data1))
                #     print(data1)
                #     # self.begin.emit()
                #     data1.clear()
                #     data2.clear()
                #     data3.clear()
                #     data4.clear()




                # print(time.strftime('%Y-%m-%d %H:%M:%S',time.localtime(now))) #以指定格式显示时间
                # print("来自客户端%s,发送的%s\n" % (client, self.receive_data))  #打印接收的内
            except:
                pass
        # def updatewindows(self):

class MenuAction(QAction):
    def __init__(self, *__args):
        super().__init__(*__args)
        self.triggered.connect(lambda: self.click_event())
        self.is_clicked = 0


    def click_event(self):
        self.is_clicked = 1

    def click_event_clear(self):
        self.is_clicked = 0
class B(QWidget):

    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):

        # self.label = QLabel('这是调出的另外一个窗口', self) # 窗口里添加一个标签

        # self.label.move(50, 50)
        self.resize(500, 500)  # 设置窗口大小
        # self.setGeometry(500, 500, 300, 300)
        self.setWindowTitle('求和图像显示')
        layout_win = QVBoxLayout(self)  # 创建0级垂直布局管理器layout_win
        layout_win.setContentsMargins(0, 0, 0, 0)  # 设置布局管理器与窗口四个边沿的距离0
        self.setLayout(layout_win)  # 设置窗口的布局为0级布局管理器layout_win

        # 图像窗口
        self.graph_win = pg.GraphicsLayoutWidget(self)  # 创建图像窗口控件graph_win
        # self.graph_win.setConfigOption('background', '#f0f0f0')
        self.graph0 = self.graph_win.addPlot()  # 创建图像graph0

        # pg.setConfigOption('background', '#f0f0f0')
        # pg.setConfigOption('foreground', 'd')
        self.curve0 = self.graph0.plot(pen="r")  # 创建曲线curve0
        self.curve1 = self.graph0.plot(pen="g")
        self.curve2 = self.graph0.plot(pen="b")
        self.curve3 = self.graph0.plot(pen="w")
        self.curve4 = self.graph0.plot(pen="r")  # 创建曲线curve0
        self.curve5 = self.graph0.plot(pen="g")
        self.curve6 = self.graph0.plot(pen="b")
        self.curve7 = self.graph0.plot(pen="w")
        self.com_now = None  # 当前串口
        self.com_opt_obj = None  # 串口操作对象，打开串口后创建
        self.com_baudrate = 0  # 串口波特率
        self.com_action_list = []  # 串口菜单列表
        self.com_list = []  # 串口列表
        self.max_len_x = 100  # x轴最大长度
        self.text_en = True  # 文本显示使能
        self.graph_en = True
        self.com_buf = None
        self.graph_y = []
        self.graph_y1 = []
        self.graph_y2 = []
        self.graph_y3 = []
        self.graph_y4 = []
        self.ch_num = 8
        self.graph_ch1_y = []
        self.graph_ch2_y = []
        self.graph_ch3_y = []
        self.graph_ch4_y = []
        self.graph_ch5_y = []
        self.graph_ch6_y = []
        self.graph_ch7_y = []
        self.graph_ch8_y = []
        layout_func = QHBoxLayout()  # 创建1级水平布局管理器layout_func
        layout_func.setContentsMargins(0, 0, 10, 0)
        layout_win.addWidget(self.graph_win)  # 将图像窗口控件graph_win添加到0级布局管理器layout_win
        layout_win.addLayout(layout_func)  # 将1级布局管理器layout_func添加到0级布局管理器layout_win
        key_text_clean = QPushButton("清除数据")

        key_text_clean.clicked.connect(lambda: self.graph_clear())
        layout_win.addWidget(key_text_clean)
        # self.myUDPConnect = UDPConnect(self)
        # self.myUDPConnect.begin2.connect(self.updateplot)
    def updateplot(self):
        global data1
        global data2
        global data3
        global data4
        global plotallflag
        if(plotallflag==False):
            self.datesum = data1+data2+data3+data4
            self.graph_y.append(data1)
            self.graph_ch1_y.clear()
            self.graph_ch1_y = list(self.graph_y)
            ch1_x = range(0, len(self.graph_ch1_y))
            self.curve0.setData(ch1_x, self.graph_ch1_y)
        else:
            self.graph_y1.append(data1)
            self.graph_y2.append(data2)
            self.graph_y3.append(data3)
            self.graph_y4.append(data4)
            self.graph_ch1_y.clear()
            self.graph_ch1_y = list(self.graph_y1)
            ch1_x = range(0, len(self.graph_ch1_y))
            self.curve0.setData(ch1_x, self.graph_ch1_y)
            self.graph_ch2_y.clear()
            self.graph_ch2_y = list(self.graph_y2)
            ch2_x = range(0, len(self.graph_ch2_y))
            self.curve1.setData(ch2_x, self.graph_ch2_y)
            self.graph_ch3_y.clear()
            self.graph_ch3_y = list(self.graph_y3)
            ch3_x = range(0, len(self.graph_ch3_y))
            self.curve2.setData(ch3_x, self.graph_ch3_y)
            self.graph_ch4_y.clear()
            self.graph_ch4_y = list(self.graph_y4)
            ch4_x = range(0, len(self.graph_ch4_y))
            self.curve3.setData(ch4_x, self.graph_ch4_y)


    def graph_clear(self):
        if (plotallflag == False):
            self.curve0.setData([], [])
            self.curve1.setData([], [])
            self.curve2.setData([], [])
            self.curve3.setData([], [])
            self.curve4.setData([], [])
            self.curve5.setData([], [])
            self.curve6.setData([], [])
            self.curve7.setData([], [])
            self.graph_ch1_y.clear()
            self.graph_ch2_y.clear()
            self.graph_ch3_y.clear()
            self.graph_ch4_y.clear()
            self.graph_ch5_y.clear()
            self.graph_ch6_y.clear()
            self.graph_ch7_y.clear()
            self.graph_ch8_y.clear()
            self.graph_y.clear()
        else:
            self.curve0.setData([], [])
            self.curve1.setData([], [])
            self.curve2.setData([], [])
            self.curve3.setData([], [])
            self.curve4.setData([], [])
            self.curve5.setData([], [])
            self.curve6.setData([], [])
            self.curve7.setData([], [])
            self.graph_ch1_y.clear()
            self.graph_ch2_y.clear()
            self.graph_ch3_y.clear()
            self.graph_ch4_y.clear()
            self.graph_ch5_y.clear()
            self.graph_ch6_y.clear()
            self.graph_ch7_y.clear()
            self.graph_ch8_y.clear()
            self.graph_y1.clear()
            self.graph_y2.clear()
            self.graph_y3.clear()
            self.graph_y4.clear()



class Ui_MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
          super().__init__()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMinimumSize(QtCore.QSize(1038, 0))
        self.centralwidget.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget.setMouseTracking(False)
        self.centralwidget.setTabletTracking(False)
        self.centralwidget.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.centralwidget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.centralwidget.setObjectName("centralwidget")
        
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setLocale(QtCore.QLocale(QtCore.QLocale.Chinese, QtCore.QLocale.China))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setObjectName("tabWidget")
        
        self.main = QtWidgets.QWidget()
        self.plot = QtWidgets.QWidget()
        self.figure = QtWidgets.QWidget()
        
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)#设置为垂直布局
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget.addTab(self.main, "")
        self.tabWidget.addTab(self.plot, "")
        self.tabWidget.addTab(self.figure, "")
        
       
        
        self.figure.setObjectName("figure")
        self.plot.setObjectName("plot")
        self.main.setObjectName("main")
        
        self.gridLayout = QtWidgets.QGridLayout(self.main)
        self.horizontalLayout = QtWidgets.QVBoxLayout(self.figure)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.plot)
        
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        #self.bianliang()
        self.initmain()
        self.initplot()
        self.initfiguer()
        self.initudp()
        self.verticalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 1038, 26))
        # self.menubar.setObjectName("menubar")
        # self.menumain = QtWidgets.QMenu(self.menubar)
        # self.menumain.setObjectName("menumain")
        # MainWindow.setMenuBar(self.menubar)
        # self.menubar.addAction(self.menumain.menuAction())

        self.retranslateUi(MainWindow)
        # self.pushButton_3 = QtWidgets.QPushButton(self.figure)
        # self.pushButton_3.setObjectName("绘图botton")
        # self.horizontalLayout.addWidget(self.pushButton_3)
 
        # self.pushButton = QtWidgets.QPushButton(self.plot)
        # self.pushButton.setObjectName("pushButton")
        # self.horizontalLayout_2.addWidget(self.pushButton)
       
    def initmain(self):
        '''----------------------发送函数-----------------------'''
        self.pushButton_8 = QtWidgets.QPushButton(self.main)
        self.pushButton_8.setObjectName("手动发送")
        self.pushButton_8.clicked.connect(self.onClick_ButtonToText)
        self.gridLayout.addWidget(self.pushButton_8, 12, 1, 1, 1)
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.main)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.gridLayout.addWidget(self.plainTextEdit, 12, 2, 3, 1)
        
        self.label = QtWidgets.QLabel(self.main)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 0, 1, 1)
        
        self.label1 = QtWidgets.QLabel(self.main)
        self.label1.setObjectName("label")
        self.gridLayout.addWidget(self.label1, 2, 0, 1, 1)
        
        self.label_7 = QtWidgets.QLabel(self.main)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 6, 0, 1, 1)
        
        self.line = QtWidgets.QFrame(self.main)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.line, 8, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.main)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 3, 0, 1, 1)
        self.line_2 = QtWidgets.QFrame(self.main)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.gridLayout.addWidget(self.line_2, 8, 1, 1, 1)
        self.pushButton_7 = QtWidgets.QPushButton(self.main)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout.addWidget(self.pushButton_7, 12, 0, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.main)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 7, 0, 1, 1)
       
        # self.checkBox = QtWidgets.QCheckBox(self.main)
        # self.checkBox.setObjectName("checkBox")
        # self.checkBox.stateChanged.connect(lambda:self.checkboxState(self.checkBox))
        # self.gridLayout.addWidget(self.checkBox, 12, 0, 1, 1)#十进制
        # self.checkBox_2 = QtWidgets.QCheckBox(self.main)
        # self.checkBox_2.setObjectName("checkBox_2")
        # self.checkBox_2.stateChanged.connect(lambda:self.checkboxState(self.checkBox_2))
        # self.gridLayout.addWidget(self.checkBox_2, 12, 1, 1, 1)#十六进制
        self.button1 = QtWidgets.QRadioButton('十进制')
        self.button1.setChecked(True)

        self.button1.toggled.connect(self.buttonState)
        self.gridLayout.addWidget(self.button1,13, 0, 1, 1)

        self.button2 = QtWidgets.QRadioButton('十六进制')
        self.button2.toggled.connect(self.buttonState)
        self.gridLayout.addWidget(self.button2,13, 1, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.main)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(lambda:self.whichButton(self.pushButton_2))
        self.gridLayout.addWidget(self.pushButton_2,11, 1, 1, 1)
        '''----------------------ip-----------------------'''
       # self.layout4= QVBoxLayout()
        self.ipLineEdit = QtWidgets.QLineEdit(self.main)
        self.ipLineEdit.setReadOnly(True)
        self.ipLineEdit.setObjectName("comboBox")
        # self.ipLineEdit.setInputMask('000.000.000.000;')
        #self.gridLayout.addRow('数字掩码',ipLineEdit)
        # self.ipLineEdit.textChanged.connect(self.textChanged)
        self.pushButton_3 = QtWidgets.QPushButton(self.main)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(lambda: self.whichButtonip(self.pushButton_3))
        self.gridLayout.addWidget(self.pushButton_3,8, 1, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.main)
        self.pushButton_5.setObjectName("pushButton_3")
        # self.pushButton_5.setGeometry(100,100,100,100)
        self.pushButton_5.clicked.connect(lambda: self.whichButtonport(self.pushButton_5))
        self.gridLayout.addWidget(self.pushButton_5, 10, 1, 1, 1)
        self.gridLayout.addWidget(self.ipLineEdit, 1, 1, 1, 1)
        '''----------------------改掩码-----------------------'''
        self.ipLineEdit2 = QtWidgets.QLineEdit(self.main)
        self.ipLineEdit2.setObjectName("comboBox2")
        # self.ipLineEdit2.setInputMask('000.000.000.000;_')
        self.ipLineEdit2.textChanged.connect(self.textChanged1)
        #self.gridLayout.addRow('数字掩码',ipLineEdit)
        self.gridLayout.addWidget(self.ipLineEdit2, 2, 1, 1, 1)
        
        self.ipLineEdit3 = QtWidgets.QLineEdit(self.main)
        self.ipLineEdit3.setObjectName("comboBox3")
        self.ipLineEdit3.setInputMask('0000;_')
        self.ipLineEdit3.textChanged.connect(self.textChanged2)
        #self.gridLayout.addRow('数字掩码',ipLineEdit)
        self.gridLayout.addWidget(self.ipLineEdit3, 3, 1, 1, 1)
        '''----------------------改掩码-----------------------'''
        self.ipLineEdit4 = QtWidgets.QLineEdit(self.main)
        self.ipLineEdit4.setObjectName("comboBox4")
        self.ipLineEdit4.setReadOnly(True)
        self.gridLayout.addWidget(self.ipLineEdit4, 4, 1, 1, 1)
        self.label_ip = QtWidgets.QLabel(self.main)
        self.label_ip.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_ip, 4, 0, 1, 1)
        self.comboBox_3 = QtWidgets.QComboBox(self.main)
        self.comboBox_3.setObjectName("comboBox_3")
        for i in range(0,10):
            self.comboBox_3.addItem(str(i))
        self.comboBox_3.currentIndexChanged.connect(self.selectionChange1)
        self.gridLayout.addWidget(self.comboBox_3, 5, 1, 1, 1)
        self.comboBox_7 = QtWidgets.QComboBox(self.main)
        self.comboBox_7.setObjectName("comboBox_7")
        for i in range(0,10):
            self.comboBox_7.addItem(str(i))
        self.comboBox_7.currentIndexChanged.connect(self.selectionChange2)
        self.gridLayout.addWidget(self.comboBox_7, 6, 1, 1, 1)
        self.comboBox_8 = QtWidgets.QComboBox(self.main)
        self.comboBox_8.setObjectName("comboBox_8")
        for i in range(0,10):
            self.comboBox_8.addItem(str(i))
        self.comboBox_8.currentIndexChanged.connect(self.selectionChange3)
        self.gridLayout.addWidget(self.comboBox_8, 7, 1, 1, 1)
        
        
        self.textEdit = QtWidgets.QTextEdit(self.main)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setReadOnly(True)
        self.gridLayout.addWidget(self.textEdit, 1, 2, 10, 1)

        self.label_3 = QtWidgets.QLabel(self.main)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 5, 0, 1, 1)
         

        # self.tabWidget.setCurrentIndex(0)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def initplot(self):
        self.b = B()
        self.b.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        self.channel_1=False
        self.channel_2 = False
        self.channel_3 = False
        self.channel_4 = False
        self.graph_y_1 = []
        self.graph_y_2 = []
        self.graph_y_3 = []
        self.graph_y_4 = []
        self.graph_ch1_y = []
        self.graph_ch2_y = []
        self.graph_ch3_y = []
        self.graph_ch4_y = []
        self.layout1 = QVBoxLayout()
        self.layout2 = QHBoxLayout()
        self.layout3 = QHBoxLayout()
        self.layout4=  QHBoxLayout()
        self.layout5 = QHBoxLayout()
        # pg.setConfigOption('background', '#f0f0f0')
        # pg.setConfigOption('foreground', 'd')
        self.graph_win = pg.GraphicsLayoutWidget(self.plot)  # 创建图像窗口控件graph_win

        self.graph0 = self.graph_win.addPlot()  # 创建图像graph0
        self.curve0 = self.graph0.plot(pen="r")  # 创建曲线curve0
        self.curve1 = self.graph0.plot(pen="g")
        self.curve2 = self.graph0.plot(pen="b")
        self.curve3 = self.graph0.plot(pen="w")
        self.curve4 = self.graph0.plot(pen="r")  # 创建曲线curve0
        self.curve5 = self.graph0.plot(pen="g")
        self.curve6 = self.graph0.plot(pen="b")
        self.curve7 = self.graph0.plot(pen="w")
        layout_func = QtWidgets.QVBoxLayout(self.plot)  # 创建1级水平布局管理器layout_func
        layout_func.setContentsMargins(0, 0, 10, 0)

        self.graph_win_1 = pg.GraphicsLayoutWidget(self.plot)  # 创建图像窗口控件graph_win
        self.graph0_1 = self.graph_win_1.addPlot()  # 创建图像graph0
        self.curve0_1 = self.graph0_1.plot(pen="r")  # 创建曲线curve0
        self.curve1_1 = self.graph0_1.plot(pen="g")
        self.curve2_1 = self.graph0_1.plot(pen="b")
        self.curve3_1 = self.graph0_1.plot(pen="w")
        self.curve4_1 = self.graph0_1.plot(pen="r")  # 创建曲线curve0
        self.curve5_1 = self.graph0_1.plot(pen="g")
        self.curve6_1 = self.graph0_1.plot(pen="b")
        self.curve7_1 = self.graph0_1.plot(pen="w")
        layout_func_1 = QtWidgets.QVBoxLayout(self.plot)  # 创建1级水平布局管理器layout_func
        layout_func_1.setContentsMargins(0, 0, 10, 0)
        self.graph_win_2 = pg.GraphicsLayoutWidget(self.plot)  # 创建图像窗口控件graph_win
        self.graph0_2 = self.graph_win_2.addPlot()  # 创建图像graph0
        self.curve0_2 = self.graph0_2.plot(pen="r")  # 创建曲线curve0
        self.curve1_2 = self.graph0_2.plot(pen="g")
        self.curve2_2 = self.graph0_2.plot(pen="b")
        self.curve3_2 = self.graph0_2.plot(pen="w")
        self.curve4_2 = self.graph0_2.plot(pen="r")  # 创建曲线curve0
        self.curve5_2 = self.graph0_2.plot(pen="g")
        self.curve6_2 = self.graph0_2.plot(pen="b")
        self.curve7_2 = self.graph0_2.plot(pen="w")
        layout_func_2 = QtWidgets.QVBoxLayout(self.plot)  # 创建1级水平布局管理器layout_func
        layout_func_2.setContentsMargins(0, 0, 10, 0)
        self.graph_win_3 = pg.GraphicsLayoutWidget(self.plot)  # 创建图像窗口控件graph_win
        self.graph0_3 = self.graph_win_3.addPlot()  # 创建图像graph0
        self.curve0_3 = self.graph0_3.plot(pen="r")  # 创建曲线curve0
        self.curve1_3 = self.graph0_3.plot(pen="g")
        self.curve2_3 = self.graph0_3.plot(pen="b")
        self.curve3_3 = self.graph0_3.plot(pen="w")
        self.curve4_3 = self.graph0_3.plot(pen="r")  # 创建曲线curve0
        self.curve5_3 = self.graph0_3.plot(pen="g")
        self.curve6_3 = self.graph0_3.plot(pen="b")
        self.curve7_3 = self.graph0_3.plot(pen="w")
        layout_func_3 = QtWidgets.QVBoxLayout(self.plot)  # 创建1级水平布局管理器layout_func
        layout_func_3.setContentsMargins(0, 0, 10, 0)
        self.layout2.addWidget(self.graph_win)
        self.layout2.addLayout(layout_func)
        self.layout2.addWidget(self.graph_win_1)
        self.layout2.addLayout(layout_func_1)
        self.layout3.addWidget(self.graph_win_2)
        self.layout3.addLayout(layout_func_2)
        self.layout3.addWidget(self.graph_win_3)
        self.layout3.addLayout(layout_func_3)
        self.layout1.addLayout(self.layout2)
        self.layout1.addLayout(self.layout3)
        self.horizontalLayout_2.addLayout(self.layout1)
        self.checkBox = QtWidgets.QCheckBox(self.plot)
        self.checkBox.setObjectName("checkBox")
        self.checkBox.stateChanged.connect(lambda:self.checkboxState(self.checkBox))
        self.layout4.addWidget(self.checkBox)#十进制
        self.checkBox_2 = QtWidgets.QCheckBox(self.plot)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox_2.stateChanged.connect(lambda:self.checkboxState(self.checkBox_2))
        self.layout4.addWidget(self.checkBox_2)#十六进制
        self.checkBox_3 = QtWidgets.QCheckBox(self.plot)
        self.checkBox_3.setObjectName("checkBox_3")
        self.checkBox_3.stateChanged.connect(lambda: self.checkboxState(self.checkBox_3))
        self.layout4.addWidget(self.checkBox_3)  # 十六进制
        self.checkBox_4 = QtWidgets.QCheckBox(self.plot)
        self.checkBox_4.setObjectName("checkBox_4")
        self.checkBox_4.stateChanged.connect(lambda: self.checkboxState(self.checkBox_4))
        self.layout4.addWidget(self.checkBox_4)  # 十六进制
        self.pushButton_4 = QtWidgets.QPushButton(self.plot)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.b.show)
        self.layout4.addWidget(self.pushButton_4)  # 十六进制
        self.layout1.addLayout(self.layout4)
        self.pushButton_plot1 = QtWidgets.QPushButton(self.plot)
        self.pushButton_plot1.setObjectName("pushButton_plot1")
        self.pushButton_plot1.clicked.connect(lambda:self.whichButtonclear(self.pushButton_plot1))
        self.layout5.addWidget(self.pushButton_plot1)  # 十六进制
        self.pushButton_plot2 = QtWidgets.QPushButton(self.plot)
        self.pushButton_plot2.setObjectName("pushButton_plot2")
        self.pushButton_plot2.clicked.connect(lambda:self.whichButtonclear(self.pushButton_plot2))
        self.layout5.addWidget(self.pushButton_plot2)  # 十六进制
        self.pushButton_plot3 = QtWidgets.QPushButton(self.plot)
        self.pushButton_plot3.setObjectName("pushButton_plot3")
        self.pushButton_plot3.clicked.connect(lambda:self.whichButtonclear(self.pushButton_plot3))
        self.layout5.addWidget(self.pushButton_plot3)  # 十六进制
        self.pushButton_plot4 = QtWidgets.QPushButton(self.plot)
        self.pushButton_plot4.setObjectName("pushButton_plot4")
        self.pushButton_plot4.clicked.connect(lambda:self.whichButtonclear(self.pushButton_plot4))
        self.layout5.addWidget(self.pushButton_plot4)  # 十六进制
        self.pushButton_plot5 = QtWidgets.QPushButton(self.plot)
        self.pushButton_plot5.setObjectName("pushButton_plot5")
        self.pushButton_plot5.clicked.connect(lambda: self.whichButtonall(self.pushButton_plot5))
        self.layout5.addWidget(self.pushButton_plot5)  # 十六进制
        self.layout1.addLayout(self.layout5)

        # self.horizontalLayout_2.addWidget(self.graph_win)  # 将图像窗口控件graph_win添加到0级布局管理器layout_win
        # self.horizontalLayout_2.addLayout(layout_func)  # 将1级布局管理器layout_func添加到0级布局管理器layout_win
        # self.horizontalLayout_2.addWidget(self.graph_win_1)  # 将图像窗口控件graph_win添加到0级布局管理器layout_win
        # self.horizontalLayout_2.addLayout(layout_func_1)  # 将1级布局管理器layout_func添加到0级布局管理器layout_win
        # self.horizontalLayout_2.addWidget(self.graph_win_2)  # 将图像窗口控件graph_win添加到0级布局管理器layout_win
        # self.horizontalLayout_2.addLayout(layout_func_2)
        # self.horizontalLayout_2.addWidget(self.graph_win_3)  # 将图像窗口控件graph_win添加到0级布局管理器layout_win
        # self.horizontalLayout_2.addLayout(layout_func_3)
        # def checkboxState(self,NULL):
    #     check1Status = self.checkBox.text() + ', isChecked=' + str(self.checkBox.isChecked()) + ',checkState=' + str(self.checkBox.checkState()) + '\n'
    #     check2Status = self.checkBox_2.text() + ', isChecked=' + str(self.checkBox_2.isChecked()) + ',checkState=' + str(self.checkBox_2.checkState()) + '\n'
    #     print(check1Status + check2Status )
    def initfiguer(self):
        self.conn = sqlite3.connect('bishe.db')
        self.c = self.conn.cursor()
        self.queryModel = None
        print("数据库打开成功")
        self.c.execute("DROP TABLE COMPANY ")
        self.conn.commit()
        # 数据表
        self.c.execute('''CREATE TABLE COMPANY
                   (ID INT    NOT NULL,
                   ChannelOne           FLOAT    NOT NULL,
                   ChannelTwo            FLOAT     NOT NULL,
                   ChannelThree        FLOAT  NOT NULL,
                   ChannelFour           FLOAT   NOT NULL,
                   TIME                FLOAT    NOT NULL);''')
        self.conn.commit()
        self.tableView = None
        # 总数页文本
        self.totalPageLabel = None
        # 当前页文本
        self.currentPageLabel = None
        self.totalRecordLabel = None
        # 转到页输入框
        self.switchPageLineEdit = None
        # 前一页按钮
        self.prevButton = None
        # 后一页按钮
        self.nextButton = None
        # 转到页按钮
        self.switchPageButton = None
        # 当前页
        self.currentPage = 0
        # 总页数
        self.totalPage = 0
        # 总记录数
        self.totalRecrodCount = 0
        # 每页显示记录数
        self.PageRecordCount = 20
        self.figureflag=False
        self.sendmessage = ''
        self.db = None
        self.createWindow()
        self.setTableView()
        self.prevButton.clicked.connect(self.onPrevButtonClick)
        self.nextButton.clicked.connect(self.onNextButtonClick)
        self.beginPageButton.clicked.connect(self.figuerbutton)
        self.switchPageButton.clicked.connect(self.onSwitchPageButtonClick)
    def initudp(self):
        self.ip = '000.000.000.000'
        self.addr = '000.000.000.000'
        self.PORT = 0
        self.receive_data='0'
        # self._thread=Worker(self)
        # self._thread.begin.connect(self.updateudp)
        # self._thread.begin1.connect(self.updatewindows)
        # self._thread.valueChanged.connect(self.progressBar.setValue)
    def updateplot(self):
        global data1
        global data2
        global data3
        global data4
        if(self.channel_1):
            self.graph_y_1.append(data1)
            self.graph_ch1_y.clear()
            self.graph_ch1_y = list(self.graph_y_1)
            ch1_x = range(0, len(self.graph_ch1_y))
            self.curve0.setData(ch1_x, self.graph_ch1_y)
        if (self.channel_2):
            self.graph_y_2.append(data2)
            self.graph_ch2_y.clear()
            self.graph_ch2_y = list(self.graph_y_2)
            ch2_x = range(0, len(self.graph_ch2_y))
            self.curve0_1.setData(ch2_x, self.graph_ch2_y)
        if (self.channel_3):
            self.graph_y_3.append(data3)
            self.graph_ch3_y.clear()
            self.graph_ch3_y = list(self.graph_y_3)
            ch3_x = range(0, len(self.graph_ch3_y))
            self.curve0_2.setData(ch3_x, self.graph_ch3_y)
        if (self.channel_4):
            self.graph_y_4.append(data4)
            self.graph_ch4_y.clear()
            self.graph_ch4_y = list(self.graph_y_4)
            ch4_x = range(0, len(self.graph_ch4_y))
            self.curve0_3.setData(ch4_x, self.graph_ch4_y)
        # pass
    def updatefigure(self):
        global data1
        global data2
        global data3
        global data4
        global id
        global client
        if(self.figureflag):
            dt_ms = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')
            self.c.execute("insert into COMPANY (id,channelone,channeltwo,channelthree,channelfour,time) VALUES (?,?,?,?,?,?)",
                      (id, data1, data2, data3, data4, dt_ms))
            self.conn.commit()
            id+=1
        # pass
    
       
    def createWindow(self):
        # 操作布局
        
        operatorLayout = QHBoxLayout()
        self.prevButton = QPushButton("前一页")
        self.nextButton = QPushButton("后一页")
        self.switchPageButton = QPushButton("Go")
        self.beginPageButton = QCheckBox("打开存储")
        self.switchPageLineEdit = QLineEdit()
        self.switchPageLineEdit.setFixedWidth(40)
        switchPage = QLabel("转到第")
        page = QLabel("页")
        operatorLayout.addWidget(self.prevButton)
        operatorLayout.addWidget(self.nextButton)
        operatorLayout.addWidget(switchPage)
        operatorLayout.addWidget(self.switchPageLineEdit)
        operatorLayout.addWidget(page)
        operatorLayout.addWidget(self.switchPageButton)
        operatorLayout.addWidget(self.beginPageButton)
        operatorLayout.addWidget(QSplitter())
        # 状态布局
        statusLayout = QHBoxLayout()
        self.totalPageLabel = QLabel()
        self.totalPageLabel.setFixedWidth(70)
        self.currentPageLabel = QLabel()
        self.currentPageLabel.setFixedWidth(70)
        self.totalRecordLabel = QLabel()
        self.totalRecordLabel.setFixedWidth(70)
        statusLayout.addWidget(self.totalPageLabel)
        statusLayout.addWidget(self.currentPageLabel)
        statusLayout.addWidget(QSplitter())
        statusLayout.addWidget(self.totalRecordLabel)
        # 设置表格属性
        self.tableView = QTableView()
        self.tableView.horizontalHeader().setStretchLastSection(True)
        self.tableView.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        # 创建界面
       
        self.horizontalLayout.addLayout(operatorLayout,0)
        self.horizontalLayout.addWidget(self.tableView,10)#表格
        self.horizontalLayout.addLayout(statusLayout,2)
       
    def setTableView(self):
        print('*** step2 SetTableView')

        self.db = QSqlDatabase.addDatabase('QSQLITE')
        self.db.setDatabaseName('bishe.db')
        self.db.open()
        self.queryModel = QSqlQueryModel()
        self.currentPage = 1
        self.totalRecrodCount = self.getTotalRecordCount()
        self.totalPage = self.getPageCount()
        self.updateStatus()
        self.setTotalPageLabel()
        self.setTotalRecordLabel()
        self.recordQuery(0)
        self.tableView.setModel(self.queryModel)
        print('totalRecordCount=' + str(self.totalRecrodCount))
        print('totalPage=' + str(self.totalPage))
        self.queryModel.setHeaderData(0, Qt.Horizontal, 'ID')
        self.queryModel.setHeaderData(1, Qt.Horizontal, 'CHANNEL 1')
        self.queryModel.setHeaderData(2, Qt.Horizontal, 'CHANNEL 2')
        self.queryModel.setHeaderData(3, Qt.Horizontal, 'CHANNEL 3')
        self.queryModel.setHeaderData(4, Qt.Horizontal, 'CHANNEL 4')
        self.queryModel.setHeaderData(4, Qt.Horizontal, 'TIME ms')


    def getTotalRecordCount(self):
        self.queryModel.setQuery("select * from COMPANY")
        print( self.queryModel.setQuery("select * from COMPANY"))
        rowCount = self.queryModel.rowCount()
        # i=0
        # for x in self.db.find():
        #     i=i+1
        # rowCount=self.db.estimated_document_count()
        print('rowCount=' + str(rowCount))
        return rowCount
    def getPageCount(self):
        if self.totalRecrodCount % self.PageRecordCount == 0:
            return self.totalRecrodCount / self.PageRecordCount
        else:
            return self.totalRecrodCount / self.PageRecordCount + 1
    def updateStatus(self):
        szCurrentText = ("当前第%d页" % self.currentPage)
        self.currentPageLabel.setText(szCurrentText)
        if self.currentPage == 1:
            self.prevButton.setEnabled(False)
            self.nextButton.setEnabled(True)
        elif self.currentPage == self.totalPage:
            self.prevButton.setEnabled(True)
            self.nextButton.setEnabled(False)
        else:
            self.prevButton.setEnabled(True)
            self.nextButton.setEnabled(True)
    def setTotalPageLabel(self):
        szPageCountText = ("总共%d页" % self.totalPage)
        self.totalPageLabel.setText(szPageCountText)
    def setTotalRecordLabel(self):
        szTotalRecordText = ("共%d条" % self.totalRecrodCount)
        print('*** setTotalRecordLabel szTotalRecordText=' + szTotalRecordText)
        self.totalRecordLabel.setText(szTotalRecordText)
    def recordQuery(self, limitIndex):
        szQuery = ("select * from COMPANY limit %d,%d" % (limitIndex, self.PageRecordCount))
        print(szQuery)
        print('query sql=' + szQuery)
        self.queryModel.setQuery(szQuery)
    def onPrevButtonClick(self):
        print('*** onPrevButtonClick ');
        limitIndex = (self.currentPage - 2) * self.PageRecordCount
        self.recordQuery(limitIndex)
        self.currentPage -= 1
        self.updateStatus()
    def onNextButtonClick(self):
        print('*** onNextButtonClick ');
        limitIndex = self.currentPage * self.PageRecordCount
        self.recordQuery(limitIndex)
        self.currentPage += 1
        self.updateStatus()
    def figuerbutton(self):
        self.figureflag=self.beginPageButton.isChecked()

    def whichButtonport(self):
        self.append(self.ipLineEdit3.text())
        self.ipLineEdit3.clear()

    def onSwitchPageButtonClick(self):
        # 得到输入字符串
        szText = self.switchPageLineEdit.text()
        # 数字正则表达式
        pattern = re.compile(r'^[0-9]*[1-9][0-9]*$')
        match = pattern.match(szText)
        
        # 判断是否为数字
        if not match:
            QMessageBox.information(self, "提示", "请输入数字")
            return

        # 是否为空
        if szText == '':
            QMessageBox.information(self, "提示", "请输入跳转页面")
            return

        # 得到页数
        pageIndex = int(szText)
        # 判断是否有指定页
        if pageIndex > self.totalPage or pageIndex < 1:
            QMessageBox.information(self, "提示", "没有指定的页面，请重新输入")
            return

        # 得到查询起始行号
        limitIndex = (pageIndex - 1) * self.PageRecordCount

        # 记录查询
        self.recordQuery(limitIndex);
        # 设置当前页
        self.currentPage = pageIndex
        # 刷新状态
        self.updateStatus();

    def updatetxt(self):
        global data1
        global data2
        global data3
        global data4
        global  client
        # print(data1)
        self.textEdit.append(str(data1)+' '+str(data2)+' '+str(data3)+' '+str(data4))
        self.ipLineEdit4.setText(str(client))
    def whichButton(self,btn):
        global client
        global socketflag
        # print(btn)
        print('被单击的按钮是<' + btn.text() + '>')
        print(self.ip,'\n',self.addr,'\n',self.PORT,'\n')

        self.address = (self.ip, (int)(self.PORT))
        # print(type(address))
        if (socketflag== True):
            QMessageBox.information(self,"提示","当前socket服务端正在运行中")
        elif (socketflag== False):
            socketflag =True
            try:
                server_socket.bind(self.address)  # 为服务器绑定一个固定的地址，ip和端口
            except:
                QMessageBox.information(self, "提示", "为服务器绑定一个固定的地址，ip和端口")
        self.myUDPConnect = UDPConnect(self)
        self.myUDPConnect.begin.connect(self.updatetxt)
        self.myUDPConnect.begin1.connect(self.updatefigure)
        self.myUDPConnect.begin2.connect(self.updateplot)
        self.myUDPConnect.begin2.connect(self.b.updateplot)
        server_socket.settimeout(10)  #设置一个时间提示，如果10秒钟没接到数据进行提示
        # self.myui.textEdit.append(self.receive_data.decode())
        self.myUDPConnect.start()

    def whichButtonall(self, btn):
        global plotallflag
        if(plotallflag==False):
            self.b.graph_clear()
            plotallflag=True
        else:
            self.b.graph_clear()
            plotallflag=False
    def whichButtonip(self,btn):
        print('被单击的按钮是<' + btn.text() + '>')
        hostname = socket.gethostname()

        # 获取本机IP

        ip = socket.gethostbyname(hostname)
        self.ip=ip
        print(self.ip)
        self.textChanged(self.ip)

    def whichButtonclear(self, btn):
        print('被单击的按钮是<' + btn.text() + '>')
        if(btn.text()=="clear CHANNEL 1"):

            # self.graph0.clear()
            self.curve0.setData([], [])
            self.curve1.setData([], [])
            self.curve2.setData([], [])
            self.curve3.setData([], [])
            self.curve4.setData([], [])
            self.curve5.setData([], [])
            self.curve6.setData([], [])
            self.curve7.setData([], [])
            self.graph_y_1.clear()
            self.graph_ch1_y.clear()
        elif(btn.text()=="clear CHANNEL 2"):
            self.graph_y_2.clear()
            self.graph_ch2_y.clear()
            # self.graph0_1.clear()
            self.curve0_1.setData([], [])
            self.curve1_1.setData([], [])
            self.curve2_1.setData([], [])
            self.curve3_1.setData([], [])
            self.curve4_1.setData([], [])
            self.curve5_1.setData([], [])
            self.curve6_1.setData([], [])
            self.curve7_1.setData([], [])
        elif (btn.text() == "clear CHANNEL 3"):
            self.graph_y_3.clear()
            self.graph_ch3_y.clear()
            # self.graph0_2.clear()
            self.curve0_2.setData([], [])
            self.curve1_2.setData([], [])
            self.curve2_2.setData([], [])
            self.curve3_2.setData([], [])
            self.curve4_2.setData([], [])
            self.curve5_2.setData([], [])
            self.curve6_2.setData([], [])
            self.curve7_2.setData([], [])
        elif (btn.text() == "clear CHANNEL 4"):
            self.graph_y_4.clear()
            self.graph_ch4_y.clear()
            # self.graph0_3.clear()
            self.curve0_3.setData([], [])
            self.curve1_3.setData([], [])
            self.curve2_3.setData([], [])
            self.curve3_3.setData([], [])
            self.curve4_3.setData([], [])
            self.curve5_3.setData([], [])
            self.curve6_3.setData([], [])
            self.curve7_3.setData([], [])

    def buttonState(self):
        radioButton = self.button1.sender()
        if radioButton.isChecked() == True:
            print('<' + radioButton.text() + '> 被选中')
        else:
            print('<' + radioButton.text() + '> 被取消选中状态')
    def selectionChange1(self,i):
        self.label.setText(self.comboBox_3.currentText())
        self.label.adjustSize()
        for count in range(self.comboBox_3.count()):
            print('item' + str(count) + '=' + self.comboBox_3.itemText(count))
        print('current index',i,'selection changed', self.comboBox_3.currentText())

    def selectionChange2(self,i):
        self.label.setText(self.comboBox_7.currentText())
        self.label.adjustSize()
        for count in range(self.comboBox_7.count()):
            print('item' + str(count) + '=' + self.comboBox_7.itemText(count))

        print('current index',i,'selection changed', self.comboBox_7.currentText())
    def selectionChange3(self,i):
        self.label.setText(self.comboBox_8.currentText())
        self.label.adjustSize()
        for count in range(self.comboBox_8.count()):
            print('item' + str(count) + '=' + self.comboBox_8.itemText(count))

        print('current index',i,'selection changed', self.comboBox_8.currentText())

    def checkboxState(self, cb):
        check1Status = self.checkBox.text() + ', isChecked=' + str(self.checkBox.isChecked()) + ',checkState=' + str(
            self.checkBox.checkState()) + '\n'
        check2Status = self.checkBox_2.text() + ', isChecked=' + str(self.checkBox_2.isChecked()) + ',checkState=' + str(
            self.checkBox_2.checkState()) + '\n'
        check3Status = self.checkBox_3.text() + ', isChecked=' + str(self.checkBox_3.isChecked()) + ',checkState=' + str(
            self.checkBox_3.checkState()) + '\n'
        check4Status = self.checkBox_4.text() + ', isChecked=' + str(self.checkBox_4.isChecked()) + ',checkState=' + str(
            self.checkBox_4.checkState()) + '\n'
        #print(check1Status + check2Status + check3Status+check4Status)
        self.channel_1=self.checkBox.isChecked()
        self.channel_2 = self.checkBox_2.isChecked()
        self.channel_3 = self.checkBox_3.isChecked()
        self.channel_4 = self.checkBox_4.isChecked()

    def textChanged(self,text):
        # print("shuchu")
        self.ipLineEdit.clear()
        self.ipLineEdit.setText(self.ip)
        self.ipLineEdit2.setText('255.255.255.0')
    def textChanged1(self,text):
            self.addr = text
    def textChanged2(self,text):
            self.PORT=text
    def onClick_ButtonToText(self):
            print(self.plainTextEdit.toPlainText())
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "2018级自动化1班刘宇辰毕业设计"))
        self.pushButton_8.setText(_translate("MainWindow", "手动发送"))
        self.label.setText(_translate("MainWindow",    "I        P"))
        self.label_7.setText(_translate("MainWindow",  "P O R T选择"))
        self.label_ip.setText(_translate("MainWindow", "Client   IP"))
        self.label1.setText(_translate("MainWindow",   "子 网 掩 码"))
        self.label_2.setText(_translate("MainWindow",  "端   口  号"))
        self.pushButton_7.setText(_translate("MainWindow", "清空接受区"))
        self.label_8.setText(_translate("MainWindow",  "停   止  位"))
        self.checkBox.setText(_translate("MainWindow", "CHANNEL 1"))
        self.checkBox_2.setText(_translate("MainWindow", "CHANNEL 2"))
        self.checkBox_3.setText(_translate("MainWindow", "CHANNEL 3"))
        self.checkBox_4.setText(_translate("MainWindow", "CHANNEL 4"))
        self.pushButton_2.setText(_translate("MainWindow", "打开通讯"))
        self.pushButton_3.setText(_translate("MainWindow", "获取 I P"))
        self.pushButton_4.setText(_translate("MainWindow", "图像显示"))
        self.pushButton_5.setText(_translate("MainWindow", "PROT压栈"))
        self.pushButton_plot1.setText(_translate("MainWindow", "clear CHANNEL 1"))
        self.pushButton_plot2.setText(_translate("MainWindow", "clear CHANNEL 2"))
        self.pushButton_plot3.setText(_translate("MainWindow", "clear CHANNEL 3"))
        self.pushButton_plot4.setText(_translate("MainWindow", "clear CHANNEL 4"))
        self.pushButton_plot5.setText(_translate("MainWindow", "PLOT ALL"))
        self.label_3.setText(_translate("MainWindow",   "校   验  位"))
        # self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
# "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
# "p, li { white-space: pre-wrap; }\n"
# "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
# "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
     
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.main), _translate("MainWindow", "主要信息"))
        # self.pushButton.setText(_translate("MainWindow", "2222"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.plot), _translate("MainWindow", "绘图"))
        # self.pushButton_3.setText(_translate("MainWindow", "PushButton"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.figure), _translate("MainWindow", "数据库"))
        #self.menumain.setTitle(_translate("MainWindow", "主窗口"))
if __name__ == '__main__':
    import sys
    from PyQt5.QtWidgets import QApplication, QMainWindow
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
